/*******************************************************************************
 *      File Name: main.cpp                                               
 *         Author: Hui Chen. (c) 2015                             
 *           Mail: chenhui13@baidu.com                                        
 *   Created Time: 2015/07/31-15:39                                    
 *	Modified Time: 2015/07/31-15:39                                    
 *******************************************************************************/
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <stdlib.h>
#include <string.h>
using namespace std;
const char filename[] = "a.in";
const char tableDefFile[] = "TableDef.txt";

//------------------------------------------------------------------------------
class UDT
{
    public:
        virtual int parse(int i, string str)
        {
            printf("in parse() of base UDT\n");
        }

    //private:
    //    string value;
};

class UDT_BOOL:public UDT
{
    public:
        virtual int parse(int i, string str);
    private:
        bool value;
};

int UDT_BOOL::parse(int i, string str)
{
    if (!str.compare("TRUE"))
    {
        value = true;
        printf("column %d is UDT_BOOL:%d; ",i,value);
        return 0;
    }
    else if (!str.compare("FALSE"))
    {
        value = false;
        printf("column %d is UDT_BOOL:%d; ",i,value);
        return 0;
    }
    else
        return -1;
}

//------------------------------------------------------------------------------

class TableDef
{
    public:
        TableDef()
        {
            columns.empty();
        }
        ~TableDef()
        {
        }

        int getTableDef();
        int getColCount();
        int parse();
        int parse(int i,string sub);
    private:
        //int col_num;
        std::vector<string> columns; 
};

int TableDef::getTableDef()
{
    ifstream in(tableDefFile);
    for (string str; getline(in, str); )
    {
        cout<<str<<endl;
        columns.push_back(str);
    }
}
int TableDef::getColCount()
{
    return columns.size();
}

int TableDef::parse(int i,string sub)
{
    //TODO- use switch
    string str=columns[i];
    if(!str.compare("int"))
    {
        //return string("%d");
        int temp = atoi(sub.c_str());
        printf("column %d is int:%d; ",i,temp);
    }
    else if(!str.compare("float"))
    {
        //return string("%d");
        double temp = atof(sub.c_str());
        printf("column %d is float:%f; ",i,temp);
    }
    else if(!str.compare("char*"))
    {
        //return string("%d");
        printf("column %d is string:%s; ",i,sub.c_str());
    }
    else if (!str.compare("UDT_BOOL"))
    {
        UDT_BOOL udt;
        if (!udt.parse(i, sub))
            return 0;
        else
        {
            printf("invalid input value!\n");
            return -1;
        }
    }
    else
    {
        printf("this type is not supported yet!\n");
        return -1;
    }
}

//------------------------------------------------------------------------------
int main(){
    //ifstream in(filename);
    //ofstream out("a.out");
    TableDef table_def;
    table_def.getTableDef();
    // the fengefu  of the sub-string
    char tab = ' ';
    ifstream in(filename);
    for (string str; getline(in, str); )
    {
        cout<<str<<endl;
        for(int j=0;j<str.length();j++)
        {
            printf("array %d:%x\n",j,str.c_str()[j]);
        }
        unsigned int start=0;
        unsigned int loc = 0;
        int i=0;
        for (;i<table_def.getColCount();i++)
        {
            if (i==table_def.getColCount()-1)
                loc = str.length();
            else
                loc = str.find(tab, start );
            if( loc != string::npos )
            {
                string sub = str.substr(start,loc-start);
                cout <<start<<" "<<loc<<" Found sub string " << sub << endl;
                while(str.c_str()[loc]==' ')
                {
                    loc++;
                }
                start = loc;
                table_def.parse(i,sub);
                //printf("the type of this word is %s\n",type.c_str() );
                //cout << "Found Omega at " << loc << endl;
            }
            else
            {
                cout << "Didn't find sub" << endl;
            }
            cout<<endl;
        }
    }

}
//-------------------------------------------------------------------------------

